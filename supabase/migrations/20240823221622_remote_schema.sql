create type "public"."status" as enum ('AVAILABLE', 'PENDING', 'COMPLETE', 'UNAVAILABLE');

create type "public"."usage" as enum ('PERSONAL', 'ORGANIZATION', 'BUSINESS');

create table "public"."category" (
    "id" uuid not null default gen_random_uuid(),
    "name" text not null,
    "icon_name" text
);


alter table "public"."category" enable row level security;

create table "public"."donation" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "donor_ID" uuid default gen_random_uuid(),
    "beneficiary_ID" uuid default gen_random_uuid(),
    "status" status not null,
    "donationRequest_ID" bigint
);


alter table "public"."donation" enable row level security;

create table "public"."donationRequest" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp without time zone default now(),
    "headline" text not null,
    "description" text not null,
    "latitude" real,
    "longitude" real,
    "beneficiary_ID" uuid not null default gen_random_uuid(),
    "usage" usage,
    "status" status not null,
    "formatted_address" text not null,
    "main_location" text not null,
    "images" text[],
    "place_id" text not null,
    "secondary_location" text not null
);


alter table "public"."donationRequest" enable row level security;

create table "public"."donation_items" (
    "id" bigint generated by default as identity not null,
    "item_ID" bigint,
    "donation_ID" bigint
);


alter table "public"."donation_items" enable row level security;

create table "public"."donation_request_tags" (
    "id" bigint generated by default as identity not null,
    "tag_ID" bigint,
    "donationRequest_ID" bigint
);


alter table "public"."donation_request_tags" enable row level security;

create table "public"."images" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "url" text,
    "donationRequest_ID" bigint
);


alter table "public"."images" enable row level security;

create table "public"."item" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "quantity" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "beneficiary_ID" uuid default gen_random_uuid(),
    "category_ID" uuid default gen_random_uuid(),
    "donationRequest_ID" bigint
);


alter table "public"."item" enable row level security;

create table "public"."item_categories" (
    "id" bigint generated by default as identity not null,
    "item_ID" bigint,
    "category_ID" uuid
);


alter table "public"."item_categories" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "first_name" text,
    "last_name" text,
    "user_type" text,
    "avatar_url" text,
    "phone_number" text,
    "email" text
);


alter table "public"."profiles" enable row level security;

create table "public"."tags" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "icon_name" text
);


alter table "public"."tags" enable row level security;

CREATE UNIQUE INDEX category_pkey ON public.category USING btree (id);

CREATE UNIQUE INDEX "donationRequest_pkey" ON public."donationRequest" USING btree (id);

CREATE UNIQUE INDEX donation_items_pkey ON public.donation_items USING btree (id);

CREATE UNIQUE INDEX donation_pkey ON public.donation USING btree (id);

CREATE UNIQUE INDEX donation_request_tags_pkey ON public.donation_request_tags USING btree (id);

CREATE UNIQUE INDEX images_pkey ON public.images USING btree (id);

CREATE UNIQUE INDEX item_categories_pkey ON public.item_categories USING btree (id);

CREATE UNIQUE INDEX item_pkey ON public.item USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);

alter table "public"."category" add constraint "category_pkey" PRIMARY KEY using index "category_pkey";

alter table "public"."donation" add constraint "donation_pkey" PRIMARY KEY using index "donation_pkey";

alter table "public"."donationRequest" add constraint "donationRequest_pkey" PRIMARY KEY using index "donationRequest_pkey";

alter table "public"."donation_items" add constraint "donation_items_pkey" PRIMARY KEY using index "donation_items_pkey";

alter table "public"."donation_request_tags" add constraint "donation_request_tags_pkey" PRIMARY KEY using index "donation_request_tags_pkey";

alter table "public"."images" add constraint "images_pkey" PRIMARY KEY using index "images_pkey";

alter table "public"."item" add constraint "item_pkey" PRIMARY KEY using index "item_pkey";

alter table "public"."item_categories" add constraint "item_categories_pkey" PRIMARY KEY using index "item_categories_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."tags" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."donation" add constraint "donation_beneficiary_ID_fkey" FOREIGN KEY ("beneficiary_ID") REFERENCES profiles(id) ON UPDATE CASCADE not valid;

alter table "public"."donation" validate constraint "donation_beneficiary_ID_fkey";

alter table "public"."donation" add constraint "donation_donationRequest_ID_fkey" FOREIGN KEY ("donationRequest_ID") REFERENCES "donationRequest"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."donation" validate constraint "donation_donationRequest_ID_fkey";

alter table "public"."donation" add constraint "donation_donor_ID_fkey" FOREIGN KEY ("donor_ID") REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."donation" validate constraint "donation_donor_ID_fkey";

alter table "public"."donationRequest" add constraint "donationRequest_beneficiary_ID_fkey" FOREIGN KEY ("beneficiary_ID") REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."donationRequest" validate constraint "donationRequest_beneficiary_ID_fkey";

alter table "public"."donation_items" add constraint "donation_items_donation_ID_fkey" FOREIGN KEY ("donation_ID") REFERENCES donation(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."donation_items" validate constraint "donation_items_donation_ID_fkey";

alter table "public"."donation_items" add constraint "donation_items_item_ID_fkey" FOREIGN KEY ("item_ID") REFERENCES item(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."donation_items" validate constraint "donation_items_item_ID_fkey";

alter table "public"."donation_request_tags" add constraint "donation_request_tags_donationRequest_ID_fkey" FOREIGN KEY ("donationRequest_ID") REFERENCES "donationRequest"(id) not valid;

alter table "public"."donation_request_tags" validate constraint "donation_request_tags_donationRequest_ID_fkey";

alter table "public"."donation_request_tags" add constraint "donation_request_tags_tag_ID_fkey" FOREIGN KEY ("tag_ID") REFERENCES tags(id) not valid;

alter table "public"."donation_request_tags" validate constraint "donation_request_tags_tag_ID_fkey";

alter table "public"."images" add constraint "images_donationRequest_ID_fkey" FOREIGN KEY ("donationRequest_ID") REFERENCES "donationRequest"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."images" validate constraint "images_donationRequest_ID_fkey";

alter table "public"."item" add constraint "item_beneficiary_ID_fkey" FOREIGN KEY ("beneficiary_ID") REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."item" validate constraint "item_beneficiary_ID_fkey";

alter table "public"."item" add constraint "item_category_ID_fkey" FOREIGN KEY ("category_ID") REFERENCES category(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."item" validate constraint "item_category_ID_fkey";

alter table "public"."item" add constraint "item_donationRequest_ID_fkey" FOREIGN KEY ("donationRequest_ID") REFERENCES "donationRequest"(id) not valid;

alter table "public"."item" validate constraint "item_donationRequest_ID_fkey";

alter table "public"."item_categories" add constraint "item_categories_category_ID_fkey" FOREIGN KEY ("category_ID") REFERENCES category(id) not valid;

alter table "public"."item_categories" validate constraint "item_categories_category_ID_fkey";

alter table "public"."item_categories" add constraint "item_categories_item_ID_fkey" FOREIGN KEY ("item_ID") REFERENCES item(id) not valid;

alter table "public"."item_categories" validate constraint "item_categories_item_ID_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

set check_function_bodies = off;

create or replace view "public"."donation_requests_with_categories_and_tags" as  SELECT "donationRequest".id AS donation_request_id,
    "donationRequest".headline,
    "donationRequest".description,
    "donationRequest".status,
    "donationRequest".latitude,
    "donationRequest".longitude,
    "donationRequest".formatted_address,
    "donationRequest".main_location,
    "donationRequest".secondary_location,
    "donationRequest".images,
    "donationRequest"."beneficiary_ID",
    array_agg(DISTINCT category.name) AS category_names,
    array_agg(DISTINCT item.name) AS item_names,
    array_agg(DISTINCT tags.name) AS tag_names
   FROM (((("donationRequest"
     JOIN item ON (("donationRequest".id = item."donationRequest_ID")))
     JOIN category ON ((item."category_ID" = category.id)))
     LEFT JOIN donation_request_tags ON (("donationRequest".id = donation_request_tags."donationRequest_ID")))
     LEFT JOIN tags ON ((tags.id = donation_request_tags."tag_ID")))
  GROUP BY "donationRequest".id, "donationRequest"."beneficiary_ID";


CREATE OR REPLACE FUNCTION public.get_secret()
 RETURNS text
 LANGUAGE plpgsql
AS $function$declare
    result text;
begin
    select value into result
    from secrets
    where name = secret_name;

    return result;
end;$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.profiles (id, first_name,last_name,user_type,email, phone_number)
  values (new.id, new.raw_user_meta_data->>'first_name',new.raw_user_meta_data->>'last_name',
  new.raw_user_meta_data->>'user_type',
  new.email,
  new.raw_user_meta_data->>'phone_number');
  return new;
end;$function$
;

CREATE OR REPLACE FUNCTION public.read_secret(secret_name text)
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$declare
  secret text;
begin 
  select decrypted_secret from vault.decrypted_secrets where name =
  secret_name into secret;
  return secret;
end;$function$
;

grant delete on table "public"."category" to "anon";

grant insert on table "public"."category" to "anon";

grant references on table "public"."category" to "anon";

grant select on table "public"."category" to "anon";

grant trigger on table "public"."category" to "anon";

grant truncate on table "public"."category" to "anon";

grant update on table "public"."category" to "anon";

grant delete on table "public"."category" to "authenticated";

grant insert on table "public"."category" to "authenticated";

grant references on table "public"."category" to "authenticated";

grant select on table "public"."category" to "authenticated";

grant trigger on table "public"."category" to "authenticated";

grant truncate on table "public"."category" to "authenticated";

grant update on table "public"."category" to "authenticated";

grant delete on table "public"."category" to "service_role";

grant insert on table "public"."category" to "service_role";

grant references on table "public"."category" to "service_role";

grant select on table "public"."category" to "service_role";

grant trigger on table "public"."category" to "service_role";

grant truncate on table "public"."category" to "service_role";

grant update on table "public"."category" to "service_role";

grant delete on table "public"."donation" to "anon";

grant insert on table "public"."donation" to "anon";

grant references on table "public"."donation" to "anon";

grant select on table "public"."donation" to "anon";

grant trigger on table "public"."donation" to "anon";

grant truncate on table "public"."donation" to "anon";

grant update on table "public"."donation" to "anon";

grant delete on table "public"."donation" to "authenticated";

grant insert on table "public"."donation" to "authenticated";

grant references on table "public"."donation" to "authenticated";

grant select on table "public"."donation" to "authenticated";

grant trigger on table "public"."donation" to "authenticated";

grant truncate on table "public"."donation" to "authenticated";

grant update on table "public"."donation" to "authenticated";

grant delete on table "public"."donation" to "service_role";

grant insert on table "public"."donation" to "service_role";

grant references on table "public"."donation" to "service_role";

grant select on table "public"."donation" to "service_role";

grant trigger on table "public"."donation" to "service_role";

grant truncate on table "public"."donation" to "service_role";

grant update on table "public"."donation" to "service_role";

grant delete on table "public"."donationRequest" to "anon";

grant insert on table "public"."donationRequest" to "anon";

grant references on table "public"."donationRequest" to "anon";

grant select on table "public"."donationRequest" to "anon";

grant trigger on table "public"."donationRequest" to "anon";

grant truncate on table "public"."donationRequest" to "anon";

grant update on table "public"."donationRequest" to "anon";

grant delete on table "public"."donationRequest" to "authenticated";

grant insert on table "public"."donationRequest" to "authenticated";

grant references on table "public"."donationRequest" to "authenticated";

grant select on table "public"."donationRequest" to "authenticated";

grant trigger on table "public"."donationRequest" to "authenticated";

grant truncate on table "public"."donationRequest" to "authenticated";

grant update on table "public"."donationRequest" to "authenticated";

grant delete on table "public"."donationRequest" to "service_role";

grant insert on table "public"."donationRequest" to "service_role";

grant references on table "public"."donationRequest" to "service_role";

grant select on table "public"."donationRequest" to "service_role";

grant trigger on table "public"."donationRequest" to "service_role";

grant truncate on table "public"."donationRequest" to "service_role";

grant update on table "public"."donationRequest" to "service_role";

grant delete on table "public"."donation_items" to "anon";

grant insert on table "public"."donation_items" to "anon";

grant references on table "public"."donation_items" to "anon";

grant select on table "public"."donation_items" to "anon";

grant trigger on table "public"."donation_items" to "anon";

grant truncate on table "public"."donation_items" to "anon";

grant update on table "public"."donation_items" to "anon";

grant delete on table "public"."donation_items" to "authenticated";

grant insert on table "public"."donation_items" to "authenticated";

grant references on table "public"."donation_items" to "authenticated";

grant select on table "public"."donation_items" to "authenticated";

grant trigger on table "public"."donation_items" to "authenticated";

grant truncate on table "public"."donation_items" to "authenticated";

grant update on table "public"."donation_items" to "authenticated";

grant delete on table "public"."donation_items" to "service_role";

grant insert on table "public"."donation_items" to "service_role";

grant references on table "public"."donation_items" to "service_role";

grant select on table "public"."donation_items" to "service_role";

grant trigger on table "public"."donation_items" to "service_role";

grant truncate on table "public"."donation_items" to "service_role";

grant update on table "public"."donation_items" to "service_role";

grant delete on table "public"."donation_request_tags" to "anon";

grant insert on table "public"."donation_request_tags" to "anon";

grant references on table "public"."donation_request_tags" to "anon";

grant select on table "public"."donation_request_tags" to "anon";

grant trigger on table "public"."donation_request_tags" to "anon";

grant truncate on table "public"."donation_request_tags" to "anon";

grant update on table "public"."donation_request_tags" to "anon";

grant delete on table "public"."donation_request_tags" to "authenticated";

grant insert on table "public"."donation_request_tags" to "authenticated";

grant references on table "public"."donation_request_tags" to "authenticated";

grant select on table "public"."donation_request_tags" to "authenticated";

grant trigger on table "public"."donation_request_tags" to "authenticated";

grant truncate on table "public"."donation_request_tags" to "authenticated";

grant update on table "public"."donation_request_tags" to "authenticated";

grant delete on table "public"."donation_request_tags" to "service_role";

grant insert on table "public"."donation_request_tags" to "service_role";

grant references on table "public"."donation_request_tags" to "service_role";

grant select on table "public"."donation_request_tags" to "service_role";

grant trigger on table "public"."donation_request_tags" to "service_role";

grant truncate on table "public"."donation_request_tags" to "service_role";

grant update on table "public"."donation_request_tags" to "service_role";

grant delete on table "public"."images" to "anon";

grant insert on table "public"."images" to "anon";

grant references on table "public"."images" to "anon";

grant select on table "public"."images" to "anon";

grant trigger on table "public"."images" to "anon";

grant truncate on table "public"."images" to "anon";

grant update on table "public"."images" to "anon";

grant delete on table "public"."images" to "authenticated";

grant insert on table "public"."images" to "authenticated";

grant references on table "public"."images" to "authenticated";

grant select on table "public"."images" to "authenticated";

grant trigger on table "public"."images" to "authenticated";

grant truncate on table "public"."images" to "authenticated";

grant update on table "public"."images" to "authenticated";

grant delete on table "public"."images" to "service_role";

grant insert on table "public"."images" to "service_role";

grant references on table "public"."images" to "service_role";

grant select on table "public"."images" to "service_role";

grant trigger on table "public"."images" to "service_role";

grant truncate on table "public"."images" to "service_role";

grant update on table "public"."images" to "service_role";

grant delete on table "public"."item" to "anon";

grant insert on table "public"."item" to "anon";

grant references on table "public"."item" to "anon";

grant select on table "public"."item" to "anon";

grant trigger on table "public"."item" to "anon";

grant truncate on table "public"."item" to "anon";

grant update on table "public"."item" to "anon";

grant delete on table "public"."item" to "authenticated";

grant insert on table "public"."item" to "authenticated";

grant references on table "public"."item" to "authenticated";

grant select on table "public"."item" to "authenticated";

grant trigger on table "public"."item" to "authenticated";

grant truncate on table "public"."item" to "authenticated";

grant update on table "public"."item" to "authenticated";

grant delete on table "public"."item" to "service_role";

grant insert on table "public"."item" to "service_role";

grant references on table "public"."item" to "service_role";

grant select on table "public"."item" to "service_role";

grant trigger on table "public"."item" to "service_role";

grant truncate on table "public"."item" to "service_role";

grant update on table "public"."item" to "service_role";

grant delete on table "public"."item_categories" to "anon";

grant insert on table "public"."item_categories" to "anon";

grant references on table "public"."item_categories" to "anon";

grant select on table "public"."item_categories" to "anon";

grant trigger on table "public"."item_categories" to "anon";

grant truncate on table "public"."item_categories" to "anon";

grant update on table "public"."item_categories" to "anon";

grant delete on table "public"."item_categories" to "authenticated";

grant insert on table "public"."item_categories" to "authenticated";

grant references on table "public"."item_categories" to "authenticated";

grant select on table "public"."item_categories" to "authenticated";

grant trigger on table "public"."item_categories" to "authenticated";

grant truncate on table "public"."item_categories" to "authenticated";

grant update on table "public"."item_categories" to "authenticated";

grant delete on table "public"."item_categories" to "service_role";

grant insert on table "public"."item_categories" to "service_role";

grant references on table "public"."item_categories" to "service_role";

grant select on table "public"."item_categories" to "service_role";

grant trigger on table "public"."item_categories" to "service_role";

grant truncate on table "public"."item_categories" to "service_role";

grant update on table "public"."item_categories" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."tags" to "anon";

grant insert on table "public"."tags" to "anon";

grant references on table "public"."tags" to "anon";

grant select on table "public"."tags" to "anon";

grant trigger on table "public"."tags" to "anon";

grant truncate on table "public"."tags" to "anon";

grant update on table "public"."tags" to "anon";

grant delete on table "public"."tags" to "authenticated";

grant insert on table "public"."tags" to "authenticated";

grant references on table "public"."tags" to "authenticated";

grant select on table "public"."tags" to "authenticated";

grant trigger on table "public"."tags" to "authenticated";

grant truncate on table "public"."tags" to "authenticated";

grant update on table "public"."tags" to "authenticated";

grant delete on table "public"."tags" to "service_role";

grant insert on table "public"."tags" to "service_role";

grant references on table "public"."tags" to "service_role";

grant select on table "public"."tags" to "service_role";

grant trigger on table "public"."tags" to "service_role";

grant truncate on table "public"."tags" to "service_role";

grant update on table "public"."tags" to "service_role";

create policy "Enable read access for all users"
on "public"."category"
as permissive
for select
to public
using (true);


create policy "Only donor can create donation"
on "public"."donation"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE (profiles.user_type = 'Donor'::text))));


create policy "Corresponding beneficiary can delete"
on "public"."donationRequest"
as permissive
for delete
to public
using (("beneficiary_ID" = auth.uid()));


create policy "Enable insert for authenticated users only"
on "public"."donationRequest"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE (profiles.user_type = 'Beneficiary'::text))));


create policy "Enable read access for all users"
on "public"."donationRequest"
as permissive
for select
to authenticated
using (true);


create policy "corresponding beneficiary can update"
on "public"."donationRequest"
as permissive
for update
to authenticated
using (("beneficiary_ID" = auth.uid()));


create policy "Enable select for authenticated users only"
on "public"."donation_items"
as permissive
for select
to authenticated
using (true);


create policy "only authenticated "
on "public"."donation_items"
as permissive
for update
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."donation_request_tags"
as permissive
for select
to authenticated
using (true);


create policy "only beneficiary can add donation_tags"
on "public"."donation_request_tags"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE (profiles.user_type = 'Beneficiary'::text))));


create policy "Enable SELECT for authenticated users only"
on "public"."images"
as permissive
for select
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."item"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."item"
as permissive
for select
to authenticated
using (true);


create policy "corresponding beneficiary can delete"
on "public"."item"
as permissive
for delete
to public
using (("beneficiary_ID" = auth.uid()));


create policy "corresponding beneficiary can update"
on "public"."item"
as permissive
for update
to public
using (("beneficiary_ID" = auth.uid()));


create policy "Enable insert for authenticated users only"
on "public"."item_categories"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."item_categories"
as permissive
for select
to public
using (true);


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable read access for all users"
on "public"."tags"
as permissive
for select
to authenticated
using (true);



